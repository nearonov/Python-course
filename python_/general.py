import emoji
import asyncio
import itertools

# bd = open("D:\–∫–∞–±.–£–ê–†–ù–ï–¢.txt", 'r').read()
# ad = bd.split('\n')
# for i in ad:
#     print(i)  # —Å–ø–∏—Å–æ–∫ –∑—ñ —Å—Ç—Ä–æ–∫

# class Car:
#     brand = 'Mersedes'
#     color = 'black'
#
#     def __str__(self):
#         return f"Car obj \nbrand: {self.brand}\ncolor: {self.color}"
#
# info = Car()
# print(info)


# funck_lambda = lambda x, y: x * y
# print("–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–º–µ—â–µ–Ω–Ω–∞—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é funck_lambda:", funck_lambda(100, 2))

# class Simple:
#     a = 2
#
#
# y = Simple.a
# print(y)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–∫–ª—é—á–µ–Ω—å

# try:
#     print(x)
# except:
#     print("–ó–º—ñ–Ω–Ω–∞ 'x'- –Ω–µ –æ–±—è–≤–ª–µ–Ω–∞!")
#
# try:
#     my_func()
#
# except:
#     print("–ü–æ–º–∏–ª–∫–∞! –§—É–Ω–∫—Ü—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞!")


# –ú–Ω–æ–∂–µ–Ω–∞
# b =[2, 4, 4, 6, 6, 8]
# a = set(b)
# print(a)


# print(emoji.emojize(":thumbs_up: :red_heart:"))#üëç ‚ù§Ô∏è


# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ—Ä—Ç–µ–∂–∏

# my_tuple = (1, 2, 3, 4, 5)
# a, b, c, d, e = my_tuple
# print(a, b, c, d, e)  # 1 2 3 4 5
# a, *b = my_tuple
# print(a, b)  # 1 [2, 3, 4, 5]

# –û–±—î–¥–Ω–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —Å–ø–∏—Å–∫–∞

# my_list = [['Python', 'Lessons'], ['Django', 'Framework']]
# other_list = sum(my_list, [])
# print(other_list)  # ['Python', 'Lessons', 'Django', 'Framework']

# –î—Ä—É–≥–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç

# two_list = []
# for element in my_list:
#     for i in element:
#         two_list.append(i)
# print(two_list)  # ['Python', 'Lessons', 'Django', 'Framework']

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–æ–∫

# name = 'Eugene'
# age = 55
# info = 'Hello! {} . You are {} years old'.format(name, age)
# print(info)  # Hello! Eugene . You are 55 years old

# –§–æ—Ä–º—É—î–º —Å–µ—Ä–µ–¥—É –≤–∏–≤–æ–¥–∞

# def _print(number, name, age):
#     output = "{:} User {m} is {a} y.o.".format(number, m=name, a=age)
#     print(output)
#
#
# _print(1, 'Eugene', 55)  # 1 User Eugene is 55 y.o.


# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–π —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—î–π

# programmers = ['Eugene', 'Aleks', 'Jon']
# for index, value in enumerate(programmers):
#     print(f"{index+1}: {value}")
# 1: Eugene
# 2: Aleks
# 3: Jon

# zip() –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–ø–∏—Å–∫–∞–º

# names = ['Petrov', 'Nearonov', 'Balabat']
# grades = [45, 55, 49]
#
# for name, grade in zip(names, grades):
#     print(f"{name} : {grade}")

# Petrov : 45
# Nearonov : 55
# Balabat : 49


#  –°–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

# numbers = range(1, 5)
#
# squares = [number ** 2 for number in numbers]
# print(squares)
# [1, 4, 9, 16]


# any() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é

# my_str = [23, 5, -5]
# info = any(i < 0 for i in my_str)
# print(info)  # True

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ zip() –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤

# age = [55, 49, 43]
# name = ['Eugene', 'Natali', 'Vadym']
# my_dict = dict(zip(name, age))
# print(my_dict)
# {'Eugene': 55, 'Natali': 49, 'Vadym': 43}


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ Python
# def generator(n):
#     for i in range(n):
#         yield i
#
#
# my_generator = generator(5)
# for element in my_generator:
#     print(element, end=" ")
#  0 1 2 3 4


# –ß—Ç–æ —Ç–∞–∫–æ–µ *args –∏ **kwargs

# def my_func(a, b, *args):
#     print(a, b, args)
#
#
# my_func(5, 6, 7, 89, 10)
# 5 6 (7, 89, 10)

# def other_func(a, **kwargs):
#     print(a, kwargs)
#
#
# other_func('Eugene', y=4, c=7)
# Eugene {'y': 4, 'c': 7}

# for i in range(5):
#     if i % 2 == 0:
#         continue
#     print(i)  # 1  3


# Lambda —Ñ—É–Ω–∫—Ü–∏–∏

# numbers = (2, 3, 4, 5)
# result = map(lambda a: a * a, numbers)
# print(list(result))

# result = lambda a: a + a
# print(result(10))


# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏

# def my_decarator(argument):
#     def func():
#         print("–ó—è–≤–ª—è—é—Å—å –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º —Ñ—É–Ω–∫—Ü—ñ—ñ")
#         result = argument()
#         print("–ó—è–≤–ª—è—é—Å—å –ø—ñ—Å–ª—è –≤–∏–∫–ª–∏–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ñ")
#         return result
#
#     return func
#
#
# @my_decarator
# def my_func():
#     print("–ü—Ä–∏–≤—ñ—Ç –Ñ–≤–≥–µ–Ω!!! –¢–∏ –≤ –æ–±–µ—Ä—Ç—Ü—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @my_decarator")
#
#
# my_func()


#–§—É–Ω–∫—Ü–∏—è itertools.product() –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
# –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π,
# —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å–µ—Ö
# –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤.

one_list = ['red', 'blue', 'green']
two_list = ['S', 'M', 'L']
other_list = list(itertools.product(one_list, two_list))
print(other_list)
